using NUnit.Framework;
using System;
using System.Collections.Generic;

namespace LeetCodeExample.Test.Google
{
    /// <summary>

    /// </summary>
    public class _01525_GoodStringSplit_Test
    {
        [SetUp]
        public void Setup()
        {
        }

        [Test]
        public void Test()
        {
            var answer = NumSplits("aacaba");
            Assert.AreEqual(2, answer);

            answer = NumSplits("abcd");
            Assert.AreEqual(1, answer);

            answer = NumSplits("aaaaa");
            Assert.AreEqual(4, answer);

            answer = NumSplits("acbadbaada");
            Assert.AreEqual(2, answer);

            answer = NumSplits("cikhcijkeiifcakbhbabheccikbcbajhfcchaififbaecjihgfibffifaghbecjifbhahhibcbbebhkighjiehacafdhbijbghiefeakkehhggcgecckgaibfahejhgiabbgbcccjgkekfjjbekkfcfcfaeekkcbjgaffbaaigkgaajbfchajfgedkbbbgiegbbbjijfcaakibkahjkhhdikaaheaecgjjhdhefjbgfcjhgdakihajihjciigfhfdfjfedhjiggckkcecidggfcdefhgkghehfcfbkihgcbajbefeccidaegcjgbegijghbjgbfigdkbgfekgaeecdfjdjgkdbhjekgihakkbbcdabiabcadaeacjaiihcagdhdhfdgdhfkededhjeggbffhbhehdkkcedcihhjhfecafbicbdfihcdifbdaeiedkiakeghfkkkdckbkdadifaehcbkckibkjbgkbeeciikggicdfbhcafgjidhgecjibggiabifcccgghdgiegdajifehejkcejfbbdbegcfijdfckcahkckjgffjjahdbccifgifedfadjhdbjibdachheggcfgakghgikbccgaccbajfdfdghfdkdkbfdkgjkbjbiffkegfckhdhejegajhciigecbejkjdjdjkjbigebgkcgeejckighbehcehgkbkkfddchkabjbagifkbckdggdhekdkafhcbgchhgiejiahgdfefdbjicgkkdehbfddigiehiachjijehbeaakdaggidadfahiijfgijaabjegiehdaheeahffaiigcaciejcjickehgehgghcaaffdajickigbcajebkfgbfgihkcdjbcceceabeaegdddggbfedckfkcifkabjchchakicdjadjakbifejckijgchjcdfejdhihggjacghkjbbihjekfibdhbbfgeedbcahehhakeahjfdfifhfhbggefdgkgdkkhbfcdecfgjbjjjgegedefggfckjakacajajadbajdkjekjjajdhbaeaghfchakigeedfeehdffgbdiddfbjafihgcbjbfdgcfdieekikbcjfefgckdejaifacibdhgebacidkffdhhjbadgakhddfccddgkbibkkiihbkikdaeibbagfdgehcdcaihccijbkhaiahkdikchfdidjfhdceickadhiedjkjbidkbdghcbchafegjjjekhchfjbdddggbejhchciahcideiadaccbfbjbcgifdbddhkajbckbjdjifcijejfkkkabbbkkcaiaifffdecacfhdaahhhikabbdjafaefkcgkdihckkaehddkjkjhihdcffbgikdffhdbgciegfegdfcadbbachebjiifgkieebggecjigdbgcddakhchcbafkihfjbkheafebkjjcaihjdaicgfedecgcgjdajidjihcecidakeafifhgfajhgjhekdebcackacegebkagidakccbgcgadgeefgckcjbfahaahdgagcijfkgcjjhahfhcgbeicefdebbddfjegfjghkeafcbcdfgadfgdagdcjfffchddhcacaffkiakajhgkjhkdckdjbdjdijcjhcacbcfaekiggfdcckfdjhebiaijacaeefjbkkdbakjfhbkedbechekcdehcbdkaiehgjjkjhbdcadikjjjiiaabagdjchkchkadffjgfiigdekejhhekadibhedakcffhdacfbkeiiehhkdajbhaieiihfjhkehdfhdgedakjjjhjhcgedabichbfgjjbeakiajcckfcgekekekdfhggjijkhcijgafjfbhcdfhbhieifjcdbfccfedddaccieejchjaekhhfighdkbkikkeebhhbffihefgjbhgbacjfabhebhgjkbdfdjjgbdgdfjbdihbdkihbgjjikiggjgddjbbgjekfakdiceehgeahdikjhbekjgcjidabacbdcadaicicchibafjdfbcagfdaadabhgigiikfdjigikgkdjhfieabaakbkbkkdkjbiafgkjeekjkeehjejdefhcjdiacgaidghdkjdkdjdbjbabjiddkkkakagfgggbdkjihjejejhegfafcggfjjgejghdegdbcchdfaffkdagbdcjcikjibdekhccbiaefgffckaghihfekfkfcgbgdkggdicgcjcdjgcgdckhiihidffjhhcckghdbagebccaeagabkcebheheadahgcikhbicfiadcfcbfghbdidcaagdjbhkikdhjgefigjjaehkifbfccfghcdfbbdhbdiebajjjbfhaakedakejbkkdikjaibbebccjggbjbfdikjcgbhejbjajihhiekcbbfdgihhijeabekdikgcjdaikcbifdfjikdadbjdejghkhjkakbfjeakcieaihcdfehgbcikakbicbakbicjiieiaddcgbagkafbhbkbbbcgajfgcjagfbaejjhgfkhkjkhdggagbedcbgbibadfbedkcfkdcgebchjagjicigfiegbbhefdfggjbkegdbicgbagbaijhgibjafeekfceijdbbccjhhhdhfejeckdgjkcajbkegifhfhkeecfhajchfihahbejhjcdhgfkbckjfjagkhbdcedhffgfdjagfejacciiicgbadhakgeceadaddkdabcckeijkkaffibajbfjicgbcfabcjbhachjfjcbjckdkfjdhdggbgickkiacfkikfjfdkgicafadicjgeefjbjkbadeejebdidjcihfidcfhdieiiagkcjihgckidbkdbekjgcjhgjafehkjkdciejfhjahcfecbgkjfaieadbjkidbicadkhagdijcbcbbbciegidhgaikikbebhkhkhhaaekdfhfkhjjaaiahdjjkdiiacdbachjcdagdhcacegbhfkgeiabaiigaecbkbhckkjbkcdbcdjhdcjefchhdfgagdkbhccigggckcbfeakfcaefgkihkijgfdbbedhfjccafbffhjdagbkkgaghchdfibkdjhbacaggfdhjiaecjigghackcddghjfccdfebgkcddebgeggjkhehhacfbjihbikihkbcakgbagghbjeaefjajkhegejgaeahdibdkaggckadhccehgdcdkkcachikfffefcdbjhcggfigjifffhdijihehkifjjdbbhifcakebdeakiiichgdideagfjbjdcadhighaeddigebcdjibckkifhjffiddifjkkjfjbckicgfjhbfkcciibeiekagajcibahhjbfjfbbbidiejjhehfdbfjkbgeikkkjcgedbjghbbfdegdjcfcaicbfigdaihbeifdcikfabcghcgiiahcfgejacggajdbdbjdhijiekfdeeeecfajdhigagkfefdiijdadbkhaafckcjjcbchgefadfdckkdffjaijaefjacbgifgidifkhiggecabahegkcjihjfkhkfajdfkedgggdieihgiabkcbbaajgfhkihdbabdhafbkfeffgddgebijgkgefjffjaickigkjhjkbejcccekhigfccddhedhifekhdbidfgacfifhbfiaabjjaiagcaadhiiabkdcffkhhiekjckkhjijaaehejhfgaafcbgegbjfcbiefjkdffickffbjiffifjaccgefcabfhckhdfiaeggjdhbfhiicafkbggdkaikjcdebdihbchkihhhcibccbeibagibiagkhhebfhiciabeeefkihbbehahhjdefijdbcheebjahghdgkhdihkbidhkgkbajegcaaijcgdcfgcjhehihidhecfgcaeckejejhjkebhhedhahaebhbejabakeabjhfkghgigkikgeeaihejdabkckkkecfbjkdgffikcjhckibfgfdiajdjehadggckcafgcigdheigdaijjgbidhdkajkefekkdfgbcefeebgifbfghekkiefjkadciagekiaiejebaihfbjkiaicjcejbjjgfbeebhabiackajgdcgaegcffjchgjgfhjjkfgbcdbbeajccggbjgbeikidkkkkhdedkgdbdbkigegcaddadbihkhadddjchffjhedhhaddbfdhdjdkihikbaadkigefdhehihdbekkegedkccgkdddchacfhbaifhgckkcibgckiefbkheffikkfhfddihicjbbaejifkadckjdefbacigddcgahdkffhfecckbgdbaigiiifbahkfbifebdfacjfjhkifdbadeefeihkgeecibedikaddeidkgdgbbbbgbkekedefjcefjgdbhgkiahfebeeiddjaghffjddhgkfgjckdfcgaiagacfabhdccdhjejiffhchebhfeicccbcajecedabbkjajkdahddeaabehjebffdbcakacddckhkejffcfbagjehdhdfabichabhfhjikhfgakghkhbebdkfdkfbcchdkcgidfdieebabajbcebabeedkcdeeghhehkdccdkijhjbijecfhfjfegiiggageajdkfkddaabkhidfikhgakcjfbgdhfhgcbiadecagfjabdakgadhffhddckfikjhjaicbdicjgikbekddedcakbfhigjbhajbfgieddiiafheidcjbcigfbkheeeeiickfgcjgcfbhbgheakaeajebhiaehjgajgcggfjhkkhkbgkhijegjbfikjjigggjgcicgghjhijeiihhgkgceeiighhcbekadibkadbhhhjgajdggbfbkjbcickhegihfgfkahejihdjakckkeiafikjfhkieafgkkbajfahfcegidhkhhekcfhgkagbebdijfdihhjkgeifhhcajiehahidcabhbjeifbakiiidfcbaacidkfckjgjhkjjfekgihaekddbdeacfbdkjgaaaedbeejehcefbbjfdbejjaigbiggihfkabjakahjbjbccbckkahebhcaiccghcdjjdhgihcdaihakjgfdjhgchaghfjkabkikhbdigacfehgihkfedbaccfahhkfhfejkghkfhbhdajejjjgjcjbgkccfjbdikgekfacgfdihkjdabieehckafabbkcaahcabkibbakbdbeeadheiehkjdcgkjgfbiceaefjjhcdifejbhhjefkgdabhiejagkhghafagdfceceiifbiaacdjbiaikajggchjdiakiabihdbkeeafagebbchdbifjhckdfgchdjjfhibajkhbhbhkfdjigegdagikebhehbjjcdiageiidahghedheghjcagjedjfjdeakgcafeebfcdkbbfhddfjjiaadjcbkkeieccjghbbkiafgcaakdkejhikcfigcadffajdjgjbcjgifgcadecjgjkdbffgeghieajecafeceidaeajcdifafcbfdheggjcakadkcfabhabigcciibgakfhjahhcabkcgagjgacdcfccgbjfhgcjabdhiecaccjdjjijfcgaggbdeadghhbkfhgahjjfbaeigbdcffgccgigbegjkgckjfhbjicaajkbechfdhdjcdgdabeeccjbbbhjdjkaeefejfgdfgcgdhfekbhaiigcdcikeedgfecckdfcgjbahfaikjgigbhhacjjciifjbkciihccjdijjbdjkdikjjdhbifdiegfiidiideaabgkdhfcbeddcfgaefibgijhikjffihhibfdikjidfddecebfjdjdaefhchfcffabhjgfcjdaiggckggkcbkgbcchbdkibfdgddkbcjabbekjfggjbfggaccfjaekkcacgcdcfjhcigaahjfedcgjdbbjkjehceghjfgafeaiaebfkhejgcbdbhfeeheedebajhgaihefjijiejdekkkhiafijbifgaejajbdkkcdkbgckhdijcdcidfcgdfhcgbadecgejcafikjfggikchajfkjfeikkajgaiijkcgebbbahdfcjjhiiejkbjfbkaceehkkkfggichcafaedhekjeiiifiegaffiabaacegjgcgddjcjafcbghbfkgcehfijdicgikkcfikjebgfeffdgfaajjdahbdhebchakagjbcejjkjifecejacgekbjajecgibbkdeieededicjiedibbdcdgbeajifigbchijdjfaeigijifdegkajaffeagbajiigdbaidghedbagcgbeibbbkibkcighkakekhggafdhgaeekadchfbbcfejiaghehggiacebeefgbgkcbhffaehfkekaifaegjkhddacdjjibjadjkacigckideadifdcbcbbfecebifebbbkccbhifidjikkjkjjheffifechgdjjfbgididjddgicigefagiafgkkcehchcejjbhfkcfhkckfdgbiiidjjaeibkfkhfhgieadcedkaeifckcdgfajaafjjkhjjfgkabjkegcdbabbjbefajheididaaajbbdhjicjddfcecegeeabgebgkgadgefagcfegbdjhgdkibeccjafkiideakdhbhhieidjdibajiifgdidacehgbgdafcihhdkbbhgiediekbgadeajckaghdabebfdabkeickjkakfiejcdhkgieaajhfjkchidgefbigbfccgdjafahcgeddffiicidacdkkaidacifkgbfcfcafkkhhkbchfbicgcgccchdefbhfgecgdfjgbgdfgkbedcceehdjgidbjbkdfejgghdbgcjahhgbkhgcgabiiekhieggabaakjdfgcadkjgbkegfafdfbecibhchhacgacbjbgeffgfakhegdhkfgadfijfgjdidjgebfcefegeihjdkjjciebhafbkikaejbcdbbhehiadbfdbehkecdaifkekaibfeebehibhccejbiihghhkcdibhckhccighciihbfjbgbdiafbiaajiedfdgfjiiihfjdjcfkjghijgfhgkfgdgagacaebkgagkceebdifgjjecggkeeedhdbdhfdjcgjdceffffgfddeceeeiikegegjbfcfhffiaddekcgggkcjjdkjhkcidhfidagdkjcakahcfjbaihbccchgcefekidhcaeaahgdacagijkkccgchgcfkcdaijdhbddbecfkdijkibkbkhcbcfffjdfefigcjifjabbhcjcgefigaakeeggabdickjhceggfdjhifkfcefcdjfhdjifggefaggbbhfcdcadkefiffaaacbfgaajcikhkehgbbeekhjccgbiheiigjiggdfchjidfcjkieccckbfhjjbkkgihgkijdbagiifjkgedbgfdkcegdhhjhjkikjjcfaekahifghafjifbaaagajhghkabdfaahkffcjbdbgeebdjkciiehbfaaigbaadegacjjkjigadiegjfkfdfgjbgeebjkeghaiabdkfekjafabgffdcdfehbdihjdhhfkbdgbdfgjehihiccfjkecigbhkjgidbkjhjghafdkdcjiaeafkgcieccjcdcfiffjbkgbkbaheejhcbgdbjcfiaaccgdacgcbaegkhdcdcejccejehedkiahhcdhhbhccadikgiaiikiahiefkbcjiadeckifiifdciidhgdjehciabedhddecbgbkabghbedfjeidekbddhcfbfichdebgkigbiffafjkgdjececbkehihfkhfjgfkfcccbhedihigiedjeeedcaadghckieigebjafeeheckhifbdfcffcbjckjkjhfiagkihjbahaichikcidhadfchkcjgeakeggkhajkjdahckcfgijdbicjekbecgchhbagiigdbffhcffchcjcbficdcigafkkjcbbaigdjbbdggehbkihfiaadkgcibbacfjjcgjdbeajaicebghfahidhgadbicibakbchjgkhkkedkffcigehccfifkkafhcaaadjjcegihghafakfjfbjifhebcgicjeekecddgcfcjgkkcihkakhaadhecfjfbiefaihbabjfkbiiejiccgfabbadigefifkjeffckbeehbkffaecaghjdjkjaffcibehbeadhcgbfhfdbddkhicbijedgghgajjdbhkgfeighdbgcheahkjjjgfihbjkcfkagejjcagbegkhjbadgfkcbbbkfaagbgcbjfackdjkdjgcdkfcbiejfcjakkibefekaikcbedeibakedbjkbgcdkfdbkikdfihkgcebajdddijjgekfcdfdfgjcackbihgdkcffifkdhfciibehcfbhfbhfkihdabfghfgkdeicdhehkhcijediaiacbejbcjbfffjbfkbkaijacffhjhiijcahdacjekedkjhhkibabkccfeejhjfgacjjaejfahbhcighhhdeijgadbdakabgdbhkechiehggiehhjahkcbifgbebedahdejihhjhebcgbkkffdkkjhejeackahkcfcdidaeejjghgcbdhfkigffjckecejdfeiciibkdcfdefdkhkjfcjhbhdgedkgcjehahbdcigjkjfgfhkbbgdehedahfdecgkggiijdbhikaikdeegiceckcecajickbibebkfdhhggfheidghkfkgabkecafgaahjckbigidhaaeihhaefghbhgbgkffebbiigdhbhdccgiiajjjgieckjedcbaiakkjkhieieadkjhgiejieffajiejacbdkhbdaecchbgcciifeiafeeahkikhgdbkkdbejhibbcddcjhcckkgcjgeeggibchegbhidfhhbgckgdehkeifeciedekcgedifdhajehhekbgjeeicgbkdhdjkaajchkadceaghkbbhaedhfjeiaihaaefafeiicfaghbehfbdbjbjfahchgbehhfickkggbbifkdgcijeegibiedfeeedicikbgjcieidbbkbcbegkdfdjkcjggehfiddikgdaificjbkbcccgfdccfbgbhjjcehachabihdckjajjdgfdfkcagibagahjgdebefdaaehgjiffhkhkgkegkbdcefcjjgghfjdjghhbkgjbbdkkdjififhddfhijjidghahaecfcikcdkgffacfahbjcagaidkhdifieejaehhggcgbcjdjihahbgckfghbfbehgggjhhjjdhbcddcbhdajddjejdjbjkbhehjefiejckjbhifafcckjdahekefeejcihichhahikabkgcidhajcafigehhieegcjfahikbjbajikbjhkgagkdcgeihhjaffejiddkacafjchdbbgbbdbjcbajifhekbdhbbfehbheijbceaagchegjgkckifddicdaicigijehekaijiidecgkhbhjhcdicigafbffbhdcidhjbahbhahjabdaihjdegcedhihgfhgjakgijhbgjedgfdkikdhcbbfkhbckjfjigbaidffdkibcfdadgifggjffjaggjgkaigdaidkcgbifkkhaecfgdacakfgjhjhfcjafgdhjehjffhkkjkchafjfeigkaeiababjebkhaaceibhddahaddbkaeifjfdiiafbkjbjkgfkcagffccdgdbfajafchckkdcjheicjaafgbbdbkjdhbdigbbccegihffijchaciggeifjfbbikdkieagbbgededabcegkhgdaafkjdfbhggckiafiddhfgbahjcabdbfjdjfghgjbgaabkcghaaidbabbaidfkkgeachjcaihbeaiebbjahjkjffjhaafgeadhfbfcaefibdjaijjdghachkakidheehafkhbicgeadfbebjihhjgggfbefbgbachekghbiadaegkaikkacgcdjbkaccgaebijakfjjdajfccafcjggibjbggbeijcgbiehhdfdeihiibehheejkehbhhfddgihhigiehggeeicbdcfbbggdakaegkjgjeaheiacjihgbijeibabjdeeefdickcacfgiieajkddbagbaeedfbbdigbdifacdijjcabbjacgckecabgfgkjiigjbkckchkjebjedhaaiaibkcejeiejkagjkcakhgdbakidkchchbbhiiakaifkhbeikifegbcccgfajcfhfkceecfdejfeachjbjkdjidcaehchfkjecdiacihiajjhhkdahcfifcdfhgfihhhhgkjkifhgafjcfbedaffkkfhhdcfbddegekdhigahigaibakhbedaahjehcgikikjjdiehekeeakafcjkkfafdjcdbekdaecegdbikgcbbfcifcdhcdkeidchicehiaecaijfdkhbifahbjahcgdckbbbdckdhfghgahidhkhfbjdghjjbgdfhddcbkghkdgbbbfdaaecjhijibhgjajbjieaeidfecjfedjiafikddchddfegedjdcjijdifihafahicfejachbkidegiedjcjifjkifgajidhhfhcbebkdkkgckibffhhegbfcgkjdffhjaaegdejfkeibhcahhfidebcgdaggibkabkghifbdffhjiidjdkkcjedaadifjjfkfehjafkgjddiaiehbkgabeijcdgjkdffgfakiifegehfdggjjhbbfjhhifdjfffhkgadkbgjgikibbdhhefacekddgaeefiggachbcjdjijdjbkabcbejicefejgfkeajcifahfiiiifghediegdfcaiihjdcdhkciefaefbkbaebjchijcbgdjhjbjhcedfeigbcedcbagadbfaegejdgcjckibbckaeiicbaaihfekbgedfbajcehdegkkggkcgeigeifchdfakfdakhkedddiciakfdbjcjdehkghaeeccfehgjhdeibkbdaiakbjjkhjaeekekdjechfjhceecggbhaebdeeechghhicaiaakikeecefagjfkhkfhfajhhceaagfdbaecackeihfbbbbgfcgiiekbjjfkhkbhccjgfabeiggicagiaeaideafaehgbhgffhgcbjaebkbkhadbdgajdfkchbgabegfcjiaajabbgbhdbihgdahekiadchkdkgchjjkfiegbbghichkecaiikgcikkieadcegidjjjhcjdfabedcdjcfcihgajbaieadjdchkbbfdhcfgcfaehdibbdbcacebkedfhafegeaikaigedhibejgfhbkbcjaijdeggheegbfdjghfidfaddecbdbacgagjfbdkbcjkcaibahcfdbbgdbebkcegdcbihcdafegkeiiebjefbijceccajbhhefgiigfeigekicfachbikjgbakfgkcafeeejjcgedfcjkfkchahhfbcgifhfbgaaaihceifcghdakfhihgdkhhaddejecbkiegkckadceghecaeejiiahdbfgedgbakggijiefdjjcabieabfckhccbkkcbcjfhkagaagkdcfaibagbdjbficjgggcihjihhfdjeheedgiedigebjfgkihidbkdkjajjjajghdiabdekiifgbacaggfifeakbecgekjicajcjbfbhkbhabjbagfcfhieibehbeaidkkbiefbdfeahjackgkcggecbkgdcjcbddfcbaifgihfdgghibgkjafjadbefaeheehhkccddafikkaedefbdifjhfifbekkijkkhijghbefheegdaigbjcbifjggefkifgajggdfdbchkdbedkkffieahhfbbddkafhadjhhfbkchgaefbdjfehfjhgbiekibdciakeidebhakjdhbjhhbkcbgfgjddfibcdfhheckdchddiikddbbeekhadkebekbjgeefagkcajfhhbkkfkheejkbjedbgfaikhbfjjjebkeciahbeahhkdaebbjijbhcffbdcfibdakghjjgekcfffgeebejbafdacabbeidiajcjchaegadeeiefdcjfhgdabegeijgfcibcciaiaifjciaiifdaccahdfchbfkighckfjejffhgffjdcakkkkehfdahkegaahaacjbcehjdbhbgckbidiabkhjfckbajjikjjkafhbjfbjhfeeeihfgaahchgaidcgiagghbdgcaiiebbcgjhhaeicehcededhjbffhjcjjijdajchgibbcbifakkigdgekhdjhjhckciidighdabhhaajdeagdfhajebkhakkfaheckhjjhjfcegaidiccbbjcbiddiicgefjdcdikhieckhkehjjbgdcjifdggekibgecakegccakdcicgdjbekcdekkgcichbfecdahjhcbdebbccjejijjhjbjbjideadaekefehgifiifgkiajkhjjkfiaighdbjggiejifbchhafkagbafbfkkaidfkdkjhfdggacijcijbaccidejedidddkkikcjkehdfdcdffgcabkihhdcfafhkfakhgkebkdcaefgifahdgahgechkiehhgjbdadfbijacahbjkfbfiabakidbcjagbjkgkcfkkjejdiddkdbbgaeaffifdibdcbjkkdcgjgahggfcjebbbbkdedakfkeeefccgjckfheeahicbicecjgchiaifjeegkefbaaickkhjdfhckdjecjhijebkfjjaedifkegjbdjibhjdggdefbfgfgifhdafhchdcbabfakgkcjiefkagkkcijckggdcgdaeafjedegkbgkjkciigheckkefgiiaekifjdcajdifccgkgibhaedgfffhkfjeegefiekdkgiaagjeffckgdkbbagiijbihfhhgffkeckjeafcicadiacbaakifaigbcebhahddhhghcgkhedddkeiahbbejghdhhikgehffecfijhfbkhhkjacheicejgjdbegdgjbjikggjdghegfjdejdaegakfbghjfkajkhghffjgeefeidkgkddeafahhckgfebdcekhiebgcdjbjchagebfjhdfhfffkgbgbijgbjikfjafdgdbcjgagbgjbfgdgijjgibiebkkbhekifhikgdgbaejcghdcdjafijgkihifkijhghcdahidjfkddfbekkeiakiikjiahhkggbbfcgeaejjkchjfjjkkjiihijcgdigacfkbdcaaffcdifgcabchbjhhffgkgfgbkjgbedfbbifdciccgkkjdgcifbgdceifkeajafafbajhbajhgcjgcfiihbdhcafcbgadkdgaebhhkdhgfdfgdbhfaebgbejicbiibcdhdedihejibijhbdhjcbgfhdhiekibafccaddckekkkkdbjceikkeihjjjjhghckcjbkffkbaegakjdacejdjgfhakekacekgjkbejedgjgaekffgdcbjcigdgfbdkbcbcjkdcachidgihchkkhefigcaghjdfckfifajageegehkhjdaedahhhdbkbighkagiibeceghkdebkehfacbkihfgbaijkbckeiaccgaechdgfbcfcbifdijjbifefkgcggcadigcggchieaeihjgejgcbdebbahgacaiijheechaahicjkjbihaeicifjkhjibjdebcagfjiaehdcghjkhhhafdjjdckkhbhgcgbigcjgeaaeigkfaachgiekccccjddcjfhhgdaihdaiiddhdakfjaffifkbjekcdaaifdafjbcabieefcihbdkfkieacdaeacciejfebbkghabahihddhakhhcghekbbgcjjijbhfekbdghijfjaicgaehhfhdicdaiadfjhefhkehjedeagfchbdfkgjjajidakbchadeibekghgfbidbidfdfjckhhgjhfkcdcafiihcgiacahccaiddekgicbdgkijkcfeghjadfdkgdjjbhgccekadfefbciaehbbjkjhfhcejgfjdcejbcdbdhgahkicjkecjfhbjjiecigegbgddkbdgiefkkbcjfhbkdbfijhehdbbabjebdbdfijkfbfebdkgidjfehbkhcjcgdkiegaghkfhgiighbajchdkejcehhkfeghibebdiejakiiikbjbchdegidjedfiefeaiejjjhfkkhgeehjakehadfcbehjdaacgbbcbaibcbakakchfihaahkbbahhbagegedghahgkideeibihkkbkjiahfajfcihcejgidddeihccekikfciidfgkhkefjdfghjhbgifjeehcjjbjdijjaefhdhkcfejeakkjjbdgaiakbhijigkgegbhfabbechcfhhbhbkgbajfjihhijkegejaagkefdchkdgbbkacfebgkakdibkfbkkcadfkcjgicajdajeaahedhcgkjgdkhfhbghcifbkdajebfiaegecfbhkdkcgfffbbbbaibibdbcfhihdfffgfekeeihkgjhjefjkhcddfifdaejjdjgcgjjegkcfhaddigidfeagfcjfhgkgfihbckebebhfakhgkgifbhgedhgiebkfedieghgdccchdhkhgfcdcbadikgjkfadhadckgjjdddhdjidgcgfiacfcjhcedjfikahcdjdhjegccbcbjhibecbjidcigjddjhgfkfefbhhajbjkdaeaaafjjafgdkifakahaabbhbdgkddkjdcgiikddagkcgggibkfhkbhddgkbkgeicejedeaibikgckjgdibbickheekkhgfbjecechdgigaekigghefhbekbgagecgdgigejdgcjhcaghiejjhfgigghajkgcicjcgdgagghigjeajadjeccbahegefeabkgchjfcfdbdkffkagkdfcigddbehjjjkjeabkedhbehdebhfghfbacgbgkbddadbiiggafkhdkaeidhjdbehfecjaddchhfiihajijeageajgjfccacckjhgcchbhkajagdgiihacajgjfjkbfkjahhjiikbecidijigbckhejghikhbbikcakfkkciieejagaajfegdiciaaihkdciifcccedfkgeebgfefjcchhigebkkiajbegkdfbffdcibfbggedkkjjcicgbjabbdcegfjeidhkekcfiihhfkgekhadjchjddghgfigbegijigbhckfgcdhbghjcciafbkkjkjfcjggjikehfcjaiaeiijkgafifakakeafgdabbbfciccfkaecddkdahfjjihbdidfkikaiiaaajiaifbbffbbgbbbhagjcfbiceaaefbachcbighagbdkhiibbhfibaeibkcicdbkgkddkciigihfbceecbceeffkidifjdghbbhfabdiiekfeihdkdjfgebeeekfcdbiecfdkdeijabeficfdjdegiicgjhichgjbhakagdekfahagkdefgbaejgkdjbfhdcfcdhjageifkdehhejcchbaifbgdhegbfjidkgkfcfjhckfjgffjjdahdgbhafgfgbidedjjiebbfedjggbeiciedaehjjdbfgdjhihkbdhekbghdcfbecikkdikkjfjbkajdacehbkiekbhfefifefebbeihkggjbhbbdfabjfgfggaekchicaijjdgehkabfaebgghkiijfdfjaiecbgdegcaiehekibbdikdehhhbhchckfkggchhkeheheigdcadceiifigfkgjfhbkajbidhddebbaffbfbiejkbbfichaabgbdjihkbbkjgcbdhdiakebhhcfifgeefecfjjdebkaegdjgcbbeecjhbdcihgggadfkeideebkghdikckgijdckhijgffaikjdjkeakhbfabhgfhdbhbbjeffgckbhdeggakbceadkkbibhdbgifbegafjeabcfdifajfdgdkkebiedheaceicciidiggcdkgddieafjhdeaikfakjhaahggbdcchfejgbakidbkbhceijikkgighhebhjdidcdhkbdjkabiheigkjjgkfhhkkiheejjbgbjcagjecdifaijkbgkbabcjgihegcckcbffbhckdkebeecikcbifeffjkegaidkaebkgjkhhjcajhgichickdijhekdbdjjefkgfcgjjaacfakbedjdikagdhkcghkaeakbadckafchajbececgdfihdcbkkagadajfbecggggheakfiehafhibddieihddjgedcgkdaikbcjhceejhkddaehgdbbeefdeahkdjaahcbfbgcibbhakhgfggidiajhaebdbfkdkhedhkakickababfbefhcdhidibjdbkbehhafckekcekkcghgigceefjekaffijbfjjahaicdbbhgbjkkijfcgabcjbafjehgicbckicbcifdkighkcfkjdkgjiaecfifficfjgchiekhgakkfdghibaehgccdgieeejgdjhkiggcgkcekdekdikjgbaajfdkjbihjbabghakgadedhcjafdcgkicjchkcjikeikcifdddhgcibkdaeebefbaiieafhkacgdaiegbcfbghgkihecfdafdgdbkigjgbehjgfhkbfjjbjbbdciecakekcjjkjejgfjgdihbdhkecafdajjebkkjckdfafegdifgkkkakhkedbidhighikhjcfhidikhhaabddggdikbhgggfjbjjidfkhidiecejdagaeebhcajgjjifeiefdidjjhbbaibgkjfgggaaaekhfjfckajaecijaigifcabjahbfdgggjbhaddhecdjeeejaifffdkddakadcjdigegbkfdjgacbcghcaijgdejkgiggbfdkdhdjickeebdkihadgfijkeedkiejdaefibfcghaajdfhjdhbbcaabebckeiidejbikcbfibahhfdfihkkaabgckbfcgdckfkjbiedbafbbibdcbjfkbichiehkgbijdaggchbbdhkhhedhkbjbfbihedhagahacjcicifdhifcchjkdbeehkaahicbidjddacdehhikkfceijdcjdchkihkdfbeabhkagbakahdkfgiffkkahhfbjcdigfcfcfkadfbbfbaibichjegegejcaebcckkefjkacgaijhiedhhdicckcfdgdadjdffakbbiifkeabgfaggaciicakeigaahcehebfjahdihgakeajgabejgdiaibajehjjgabfdbkdjbjfageiedeehkjihkjcijghgjbckikjdckbdfigbheggdghgbkcdcgkdagcbachkejecckcfiijjhjjbeaghfbjcefegjhikbeedeifafajehhbcggckffgjeffjfgjfgjhhdkdfifjabecjdhigjfjceaikkhagidfjcebfjkdgagjfijbbdjgegeffcgekahcbecdekfkjkhbijdidjeckddffkbcjedhkhjefhidcidfabegaijijkeihkgaicghkgheijhifcabgbcfickdbfebkjdhecjaadehddhaeghhjjbkdkbidbdkijiggihjajkfihgkhaggikdhbakhjiabgdkgadbhijackcafjbcedkifddbbhghfikjfhehaidedjjijfkiggifjkbadagcaeiggkeibjbcbfckcicfbkbfghjffjakafaadebdkgkckdfjkafhddackkibfhkghkebicbegbfjdbdgefhfghikcehaakhihhidehabgdbgckfaibcgaeeccbbgihfhghakjgchhhhciecejagacfkajejkicdggaggefbjckidjbkafkcbkjiadhcdefgijkkjbfgccjibeagakjiggfkeggjfkbfkhhhafjaeabjfgihkbfigfjkkccicfabcbfejeekebegkjijagkjfaefbfjekeeadadfkggkifijhkjfbcaefijbhfkkdbgdccaechgbifakhibbhbccigdfbkagbcigghaaahfibbjehifgfdkjgdckkgjibfakcgiceddkecgkhafefgdbhjgkefbhejjaekaahggiagcihhijidfjgebjdjefhajdfchkfkgjihhiiaiffebjhichikfahbdakjggfgfefkhgjkkbgjbjcfikacghhfbggbkdbgchffgagkkakgdbdcijcigejiakckkjgebaekkcjjhfbdaadikahdhkdkbjjaaafhbdkgihjifigjgcfjfaficaebgjdafbkfjbkcdhhdfijcgkcffabkicgdccgbcakbbehfcadgakdajaedkaghcdgejbkhdkaaekdiacedacigkhkcdehagfkihihahdajjfefgfjdidkikeebhdcbgagkiikkaikbdbbdgceigjbceciaffbejhkhjhfhfkfabhikghaefdcaecegkjfkcjebhdebhahhdbgceicjhffifcbjehcjjkdfhgcbhkkfdkaeehegbkbkbkiikgfbcbbgkkdjifdciaaccgekjjffjbheijgjhjaijhckcihkddkhbdkgfiecaebdaaheiadfckaahijhhahadjgejkghchdgajgedgchjdfjbkcikidbajedikkaafegjcjhkcfifcfgeaiffjaiefichfckhehckhgeddfciffbhdegedddkbaafiadfffackcbibgkdkffihbfhdibfebhchaihieaihdkibihacibhedjfdbhgkcjfcfkahedcdcbcdhfchebkcaadgkdjiibaggdkckdfbhbccgjkkhgjhgkjcigkjiadikkikegfdfehacjaebhciafgbefkkbikjjgijfehkdkegfffhhgjjgebjbjadagbkfcddjhgdeafiddhbakjhjiddkdhbejchkbfiaicfgeakdbjcijiggdaeaccdakiaaidhfhejkkbffckkjkkaadakhajccgefdeffjgcjieddifadbebjagfecagddgbdabaadgeecgfafcajgieiiciefdhhkcabjdbhdfcdhjbcjacfdjajgkggghcbegfghbhgdfdecfgaikggedebccfdhjadjeakgeghihfaafafaihdegfibgjkedadjjeeaiaeabeakgjkebegabkgejdikkigbdcciiaghihjfbijkeebbhdbdafgkiedgaafkdahcbdefaicgeghhffjihcgibjabdfijddicddeeeihahjjekiecadhaegbcijccjkjkkkkebbacjfhgdjkjjdcgkikejhhkgcebjkggdcabhgkkdedfhicfedideihfhdkfgfhckcbdagefigbcbchcjbeckiijhaiifgfkgehafbfdeiejhgdkajccbacgkhhjigdeeghcgjiageeabjbaifjkfajaccbbdkkddibkfgdbiajcdeaaacckcceefigbjaaahgjdgdajibdfhfdkggdbcjfkddeeaaeefekjhckghaagaekhdkhhcdgcbdacdeehijdbcgacjifajccecjjjgckjcdjjikkdffdeijceckfbfhhdheefhhifgiehefcihekfcabjhkaigieaedjekbdacaahffhkfhdiefhiaccjehccibidjcfjebijabbeeehgkcbgicgidjaiigbichahciaghdedahikhdebhhebajgiahdhkjafbcjefaggadfcbccibfajgghaffjbehbjegjfihkghcegbgjjdcjhggcagigikijheaahggfggcjiicjieafgjkcaeeceekjihbhgjbeiecjaaidhceekieejhegbjajjghhifhfbgekaedjabbcaddafkidfghakijhejhfdjeefcgjdhacfbkjjgabajeejjdhajfhaidfkkfiaibjedhagbdafhjijajbjeadbhbffdjhaacgecceaicbjehhfkcjjddjgkiiefeikifiiikeajbkieikjfhbhcdbihfachjcjjgdfbcfecgaaeciakjjiifhahgdefhfhkeakibakdjihfkjffhedahkegkhhjdiijgifckeicbaeikjdbdgfkajigafjjfeajjcabhgfddibhhdaidefekhjkefbjbcgieadgeagdkcheaegjeeecdjccfbdibhfebfgkfbdffefdbcifbadbcdffcggakiiehcakhgfkjiiieijkhikeggjgaeaabbfcfgaaakahffbkhccdgjfcjbbfdjbjdgdckgdcccgcfdehgciihbjdjcgekabbcibejghiaefkikaeebiigageffjkbjcbfgkdjhddckgbiafbcjggeadbfajakgijgbifghdkidicjcjghhiifcfgfkikfhaaihaiddbbjehcfjihaiaiiifjhddbfdjagieeahgjagkfffgdeadahkhckbiaffdiiiakbighgahedjfbcdgkchdfcbeaecafdckebdfkcbffeikibgahkeebbcdafacchikbaackffecdjjebcejieeejeicidfheekfffikcgiicdefgfddeciikgifigdeccgekjadckajebhbcajbhbchfkbdiagfjjahidcebfdkghbbfdjgbcgcfeadieaajgfkgebhkbkfffagikihdbcgjjijkfdhckakbjefaefceeekkacibakhakahhdedkafhbgcfhdiaeihggbgdhhkdeghagjbkicjckbcfjfdgkgkdcbkgfchfbchdjeejfcdiejdbcihfkcafkdiihhkjdjadgbijdhbegikadccadhkbbjadkhcjdkejeagicakjjcakccckffcggiabefcacfckghagkgedkhfkcchfeccikhhgbidfjkakiacfbbaigkcjajeegjcdcdahbbkdcbkfjgffiijdhdkchkhfiejfchahjjihcegkfahcfbhbiaadkbfhkhgkahkeaghcfgkfkhhgfccadjadcekfbghjbdhjaaghbdfekaekeebcbhgabhhaefikcfjbcakbcbjhbfgfibhhbhifajghbbcbaaciehcchgdgchkcghaekjfjigdfdaicdjbkkceheekjaehjchjbdeidkcidjeebddccgfcgckickkgjjhbkdhbbaiiaffgeggedibfjgdbjgjjagbdchhhccdcbdebcjfdfbdiefefkjchhbbkdibjcddejeedgjehhghejkkickajgbkcgeajjkejddjjabkhgghijidcheicegfbfkkjhghkkghfbcedibfakakebcbfabeaecfkdcageecdbjckgefjikjagdfdcbkbjbdkbhbfkffaaeihibkjdfcaedibeccaiibijcjggcbaebgijbkegjjhadaibhagadhgcbhhiaeiddcahgcjejbjedkdkijgbikicjidiefgihgjaegjdeaaeeahbdhbcahkgiagcbkgfkdbggeejehiejjcbkdhecjidkigdfdgdgficdaeejcdbahkdchgkchhhbajhfckgiahcgbjacebiaekeiaahfhbjjbefkdibjcajjddbihfkhjdidkfagekikadabjacjjjgiededfagkhhcbbbbfkdebfikbgjahfgjdcjgijbjijahefjcgceakdddeihhdfaabihaakfkdggecfbbkefgceijgkbbdccdckifjeficdfighjekgejkkdkjdddddgbhjkehadkdkbakiahgebeckadacedcikckcfckikdhgjdhhieajdakgeebchckadakgjfkkijhghgkdkejaiigdfiaheiiakaaegkeabifgbdfigfbdafehiaehfjjgieakekbidhgbjagjkhdikigkcckbffegibcfbccbfkhacicibkgkkeikjdcgdgghbagdfedddcekbfbfaibijadehkakkbdeihafakehceffhhddbahgbgcekakjgiddjekeihhakcejhehejdigffhahfgjbgfhkkgeiigdgidijkgkhfjejacfageecffhfifebajiibdfkjfbidbdbackikhgdfecadhjhkjachjhegjceabdbjkgckchaaagbbhgfdciafjkkgadefajdgckkbckggidffbbgfacaahbjihheagkijabhcgjakhfkihhgfehahdefgdjhkaecikhhggfgffcbjdebjicekaghidggffebkffbiekkgdefabgedjkheaeebaiadccgfikjffkaaachdgfcigjkbkcjcacechefbhddjjdkagibckbckjjbechfkeafceiiccbicgfdhjcekkdggbeaijjgeiacfggjbfaagbgjebeejgkiaefcaiifgcgedcdiigfagfjkadifjfkgegbeeejcfbddgjhbgcafjihfdjjgdgdejcfjfiegccagdfjfiibfbhkikkfffbhadbekhjfkacjkgggbgckgbgdjecajgibighijadkchbcjdfbiiifcbghhfkheeedekadcdaihcbakkjjhgecejekieijbbkdaakeedfajcahdafcchhkahkgkaafickchddhkidbahcijdhkjkbjjgeafebcfjfdagagdceiikaajfgjbejfcgejbahjibcfjghifidhjcighfdgchikbdecgbhafaheafbghjdhefkacfihgddcejdahdkahjkdkhgaeecfedckijegbkgeiijffbgiccifdgfdedacfceccgbaffikfcfjebjaejcddceffiaakbbbjkbkbbaabgjkdhiahdecdebadgekcaefcihaeebjibafececgkdbidgakchceiichbhidkbjkagaeadggkgcbibbedicidffdebcfeddfedgiekkaggggkhejadbgdhhdjdchdbkbcbihgjddfdbjbidifgkakkdfagabgaigidabkgaecjjckhfchbdedkgecdfbiejkkbfgibebbbjhbchafdefkccigcckbfheaikdkejabgjbibcdgacjafbejkeaaceebahdgdjdkgjedddkjgkjcgajddfibcihcahhebfhcdhkjkbhekibjdkhhbkfeejdighhbfhkdbbacfafdkkachidfiaecacfkcbgbhgbbiighhcccjikhbfffhjhhidgigkaihjkbdfcgjcffaefkkhichgfjhgcfhegcecaeacbhgidkbhcgdhjbejkdgdfiijcijhdhbgihikckiejdfhgedfbcbgkkcfihghggjkhgehdhkcfeickkfbcfcaegdkachekicecijeikgfbkbcigccgagjccidgccfcibgiecfeakjfkghejaiebefaekcigfgdibdkeikihkbkiiibeehbdhghcjchjdcicajjbbcadejkdaahfcccjfcdjdffbeciakeehechkdekkbbbbccakbgbgjjdbbjdkhggkhahegiaecdffhdggafgdgeifjhgkfaikkbdbedfjggghfjedicekihckaicijdegibchjgaddijebfkgjadcdbdhaabdgaedjbhkkhkhbfjjfbdikhffgidadggkihjhagkiicjkekaeaggjkkcbghecjaekiiibhedibgbahhcjhdadcfhajheefjfchjkbagediedhefkabjjdifjcejeddchkhdeejkakfdgehjhheekegkkfgbehkhiidcegejidbcbeebjdbaihcecibjkefgagbafhafdikcbbdjibejakadbgahajceedggckbdjhadfcbaiahfjadfbbgaaddjhfaahihkiiejjjaifekdheigjidkdbcchafaiafgfghjjdhjbgeidjhaacehfbbbfekdkdjkgijedbjihkckagbiefjkjhfdedkcgbcjjegffaadaigbifabchficiiieeheghehgfdhbhbekkdcabjcehbjhfccbdebkgfikfkgijgfiedggifagbjedggfjddeaffjhiceihfghfhcbkbgchdgkjffdkceedgjjeghkhcecbcjbejkefedfbdifegfdkkeecajcjcbfeeahkdgdhehehdaebhekejcjhbcfkhbggejkghiehecefaaaabhcibaabkgdijkgeiigffdhhcggbeaaffkkccbcikkcacidkhgihjfhefjfiedhgekfjgbgabakijieadffgjgghkhahdgabiijajeciehgekdeejjkgehecijhjbbhgibhchhcjbkdgjcifkibefeidhbebaeahjifejjfecfefbecjhhegkfdkhkjagkhifebjijijddaffgcjcbbcgfbahjfdcfhccekjbggfgcghchbkfejkdfahhhehbidfdkahcdcfffgichabcjjajaegabigkijidjhkkicciacjgghbacfjjffejedkccfiiajijjcgaeaechdfgbfdjieekaebeehcdgafeckibhihihbkieaicdaghkkhfcdgcijgddhcbcihjedcabifehgfjcccaigdgjjefkfdihagfabkdjfdhhbeidhajiciigjdcebcchecdfebigkaiiajgdkdjcjcggbaaiggjhbaiideahjigdbbhbegedfebfakbdigikadggjcdkekhkdjhabbfhggjgicdafjiedhdfehjdbefddjfbhjahhggeacgkachbcgeheajeefhijkaacihgabjkdfgdgfahdggihkbifcdceaehgbhfcijgjhgkiiafdadjdkbkcjefbgffacgheeeiagafeiiecebjaakeaihbbedkhdfceidahehkbjfakjhcjhfefbjfgcgjddjikdikkbhbhhjihhcffejjkefahgbkcddbbiegkchjfeeakijedakehbafjaegeackfakdhhkeajebfkgadfeggbbegigijcfjegkjacacjbkidjkibjgjkeicefcfbjihjikbeafchkkicghdhghfebkcifgkhcceebjbjhbhfgkkjkbjkffefidfjdcckjabckbbakbigdiaaffggifbjjfgigiagkkkffajjeddkcjhddcgiggdcdbfiefbkaahhekiccgadjkfeichddcaehjdcijfbjhejfidjadcakibiihddkaekahgecbjdkfifgackhbjkddhacfjecefahchcebffkbecaacecbeibfdjhbikaecebaghhfjfcikkfgdhcbjgfddkfebgfadabdaiaahdaebkdjgejdfhdkehhfiedccffacjijkfcbcfjaibfkkkegahcaiikgbikcdijkjhcjcaeijdkjkhdjahcahkagbdhfdiedbajdkgghjegebikdfkfccgacbfcgiaidjaigafkikfbgfagabfcfjfgbegihjfgfikgjgdfdhcedabeaddbdeihhbhfeajjjehiekhajhcfikhicfkfgjakikbegahfdiabhihhbicgdkcgdbcgficafkegjhgjcfeiggbjjefhejddcackffhddjbidcafieceadjieddkkfbikedkgaahgegaaiiidedaajgkakjjgaheddgeffgdhfdakdjkbaiigfgkggiggfbjdgkbaekkaigfgibaaegikbkkahdffbbdhgicdceecccibcjbjkfahigcbiafcgcigbkfckejadkjhijjhajdihfagbchcgcgcjhajicjachabacigdbabgidkiagfbadgdicdijekejaggkcfkfdejkdbediacihcgeafbccgcfhhehhgkiefcjbbbgdjedfijajjjkchkjihadkjceijaadfadedgakeghhaibabkjeicgdbjdakgjaadbhkdccbiadhbfahicfifhbhcajebfakijeffdhbafhecakkfbbhdgcjfbkjdkadgeijbfcihhgdihkagcaagjhfcbackafiibgbdhickidjfaggjffbicgdfkhdikckigfikggkejigkdfbehjfedabiebadjghagbfbkccckkjejijhakcbkbhbkaihfgdcjjkagkechifcjkdhababhakdcggajeejgejjegfgdhfgibijhbhbdkbbkfadcdgefbdefkkhcdhckbdaecifgbaiidadefeikkggafeaaiaiiehdbedkjfkkahgaedjeekjeagbdfgjbagciagifhdaacbegikaggcgadhdifdchhicgigcbdhjbjhghdeffcbkbkbchgkhacbbjkfhgegcaidebjhgekchkkchefadcikgddbdcfiafjejkchhkdkifbdadkggdkeedabgigheehcghhhikfgdceagiijbdgcfggfiiaebfdbfgehffbicekbcjhajjgiegifickbeidecijiehhdaegkfhbjjdfijdfgehigjjgkgkkkjcfeegdcbkbffakjhihfhfiejgehkbefkcegbeejkiebafdkhgcabkddcbdckbbeddagbakddhjfijdfkijheigfbiibcecbhgfhdkbdbkgjcjdijejcebbacbedgjfkjjceaahiebiihfaigecjegaedhdbjbcbajicdbdidbeafejdbagjiahikhjicgacghciibeejiahdgdjcghebgejkdgeehgekaeefigibiciifebegbjeadceageeckjddekbgciaiehjijicaadgdhecdkhaifkaeieajaahhkehckhcedkccfacfcfiadjigjbekbcjfkjihikfjhfcfibgbkkihibbdkfjbjickhakaigfdbbhikkdgieiiekhkaghcfahaecfdgehhaichigaeakaidfgejdfcgakikegfccaicighhfakgeedjhkjbkgehgfbhfckaihhjjddcibeciekjeedcgdfchekfikaaabakeagkaejhhfedeaibdbagajfeihefajjbkcjejcfkcjfcbdgfgcikeddebhdiidighcgfkdgacebfchdgdfaajhajhgceegbicgkejfgdcdibbejcijgijdabighkifggeffkjgccjhaeggebieejceagdfahcbcjedkiieebfjdcckfkbeecbkkeiddikakijdibbegbdgdfieafcgcbdbgkkcebkddbjjddegjeagjfdjgchijcdjbfiafeijbkfeabfegechcehfackiaacdeacjficjbhefhajdkehgddifhicdkkckkcdihaefdkfdcegcfcaekhabadcaficgcbkidkdbdbhabibhdkdgfkbggcccecgbkgbgddfgdkgkicbhejjhbehhgjbgdeekkfihcdkjiikfedidfhcjigdjjakjfkecehbdegfejbgfchgfjhbfhfbhkjhkfbkbfbkehaegjicdgjkdbigceejccbjfgfdjiejegifdbjkdaabcafjikjfbjaaecakbhacaaiccbahhbakcbbdkbeffjhidfgbfheekkddhbakgjiiacejdkkhakahhhkbefhgekficidkaddifdfaaajibcghddgcebgegcdkhafhahffackffichkbekejgkbfchhahfgkegkecgkcbgajbdbebgeahkfcbbfihjaibjibfbcjcddchkdakkjjibafbkidkbkhcakhaeedcaidaeabhhbcadgjjdkjfhcicaajhdkddgcdbbjfejjhaigdhkghadjegfiedegdgcifachiggkkdghhdjeadbiegjdfhfecjaekdgadhbabjdkkkkecihdbghkgehjccejdcefkciejiebhdikhkciijagjejicghjiiheaabjebkcjeigbadccaehchcdfjdjbidiafdjhecgiieikaeicckgbacgbdigkkjbkkfbfhfhcihaiagihagjcdcecgebfhdfcekaabbjgkikdijfebfidbbkcdfakagadiebbejidhkigakhgeefajjeeedffdeaefdkdfcfddgbchkcjacifgcdieadeeekfhkbfikfjkkjhficagjebbkhkhbjgicahbkafffbkafhbfdkbfifckjiiceighbigckabehbfcbejgafjdkfghigbjecgdbcdicbcghcbjhgkjifahfccgaakkhadakcafeaceidcibejfkagddggbfacgjgkjckigfdiebcafkfbgfifjfbkfbbibaehdjcbhfkfjfgggdfbkigdbdckadbehkafbjkaihiibifkbhciedjaekihhfaejgdhghkdehjkiaeafkhjggjchacgbcahacikickgffkcddghekdecbafgbbkihddbcdebhgchdjkfbagihjbccggbkebgjbccafjcbiiifcijhcigafhagkcdkicebigkghehifjbfkgccjekjfiibedjiikkffjcfhjbhijdgjbkhecehadbbkahkbbfgaafjkcbcbddjifjajfgiedhhjiekcgkddkaekhjidhgacegghcbjhkaibiaacibfaafjgbakabdgegddhjfegeiejfhchbbdjbhihdhdkfchbffacbjefgddcgkegkjafdbgjajkijgfiffkgbcjbhfakdbedfekaafbkhhhiejbbcajidakgicibgibbjkedbdjdgkijdebkjbkacbkfgdiihdkgdhjgifgghfkdkbdchhbhceagcdigihbkkbccaifkkjbaiccbhkcfdhkgjjecdjkhibbggiacfgcgadkfdcaehgiccggihfhfdciieidiiggiciedkhgiachaicdgjggaagfbkehjcggkkjibeccebejjceabjfacdihhbbehhgajgkekkhgahddijhifbdhfeedkafceciidckhecaefhijcbffacfghgbibfcbkbiabhhabcafbakhaiadgjidjijihdhccfkhabdgbbgacjfbgigcedgeigiakekihafbhbdffjaeickkfhhgkfdcjkfbhfeccbjfbbdefdhfahbfkdcbkhgedfjbcfkcekedgidfgcdgjjcbccgjfkhiefadhhbahhbagjedifkcakagehiiggfecjfiabdijbkcgicbkbgefhffgcikgdjefffhaiegaafbijcifekiedhhghdjbcficfcafgfebbgbjiacdgehcjckkbaafhdafifjbghhdachchbcejkbekeefcedajbighghiahjikaeaiaeefabihccdijicabjjdcgchcbcbibhjkekabbdiehdahjajbfhkajgcekcachkgedecjghckkiaffgfjdchkkefakceafdbkggfbkecbbfgebeaakifjdgjegiiabkgdkdebfijejieidhhecefajfhbfbcaekdigcikckcdeebgbeabhdbbhdbbidedjbcijiijedjhhijebdjkcfiaghbgdgiikdicijhcgkfcbfeidjhehbcbabcfhafhdahifbkefajahbejahiichgkeiaebdebfbiijdiicfabdkdkgiiifbcaekdkibbgiaaceijhhkhaadhcbiedhhgggcbaajdikdedfdfcekigbdiffgkkkbibhhfkgdaihihbdbghabbddajgjedbfiicgaccjajcdaikgkijekhakhkccbdijikagababhidbckdkkadjfkfijddijiccjaakbffhhbfdbjbghagiiehgackgaikcijccbffeachjidbecfgkbeegafdffcekaeakijjcibfbfdiajcfakkiffgejaiiedjbhkkbkchkbeicdgjfgkebbfabffdcbbgeafcfhbbhkaicbijjbfghjffjbbdjbakciabgaeechfhijkbggefdgkhjjedhadfcgeafjfibagdkibeikhahkdaahjegjkeickbbkabdjifkkdfkkchgieibjjbcicgckckagkkhkhkfgfijihfcdkfgedakjkebaaicchdkgcdbddbjfdahdbkkkahehjicffdkfkchadjfagjaiefbehjhgikgdgdegbgjbdhjhacbbgifdhhhkbhaadbdgagcbdijekbbdiebkccbkdehhceaahajdgdffdjjgkbhkhahcaidheiiajgjkdhfecigibafbbbeeagdfkebjccfebijiejiehgjhhaghbedbihkjabbfhagbchfegefhhciagdgafeheaeeibiighhbekbkdkfkehdhbiicidgfehjhachbibcjbdbdcfbehigbejehhahkkdjgdgiakgbdjebfgjdikdkdjjhejbfkaikjghbkgdccigfkgidgcffebadgjaekebigehiegfbadjbggcbifgigghjbciibgbdkdfhbjheakbediehhikhagghdcgikeagcedehgeacicbaagfahkfbfdhdgicbdcfkeecgchifgbdkeigaedgffijbbjbkajkjejjijfafhiddhijbdiieahfagjagjibaadfbacfebgfiajecfffccjfjkcjchjkhabhbbhhbghjhghhaakfhgbhehkicbkgdjeeccefebkbfifbbkakfkafecfbhdjjhfijbejddggeajciidjfhiaihjeiackikdbifbahbgdfebahhiaageijfkbkgagjakhaejgdbkaeicfjihhaafcibfebjggaafkfdjejchdkbjfihefhiifhcfddhgjafbbkaekagacjghieggkjhajigejdfgcgkjihakekefifheahbjkkkcgcaidfdibjcaihkacdbejecffgfgcefigddfhdcjhbbfbbhbheaijgbffchddbjjbbjbcffjkfaeaecgiabfdiajjkhejbbedhejbddacbbhbfcbjdkbhgakjfhhbcdkcihdjjhefjgcekfhebfikeabichikcicdajdfabaejdbchdjfjdgcbdjjejgheedcfjdeijgckdcdfkbjcbeejiicidddgkeebdkhggibahfbfbcbgikhgdagakiciakeekikfhdeagjafeagacacjdcbcghiddfcebhcajibebjfhbkdjidbdjjjchibdkiiejckedfhhjiccdgfackgdcjdeacjeajacfgbjhbdjfigicjceddcgaabajgkiedadkgdkghaadifakicbigfaaahbejbdheacidgbihffbkijbdiihjigeeickdhidfgabfaahfebicffkihffffiadgkgkjecheakiekfgcgdgikhafekidjhcbjikkbjjkhgdbbighchhkakehifbfhaedjkgfdbeihgjdajkcbaegbhaghcafgdjfhhbggdgjbbhjfikbehjijibkgaehgfibcegckejcejcbgjbacefbigjjafgibchekebieaajehbcdgighdfacfadffeejbdkjffhdfkaakhigefkjfffjdhjfhfeibghdbhbjacebaieejhfdibgachckckcehjgkbbdghahfkejijidcihfcjedkcbjhjchbiffikgicegeddiehbfhbckgfefajcfkjajakagdjaaahcecbjgdkkkdahfbakdechfbhaacheaegbfkhcdbkbhdggccidjkegjdjdbfbiigajicghcdjihahghadfegkbdhkhhdgkjdiggfdadgckfcaibgbbfdagifkkfjdceefggbgdhggckcbifcifigkccjabbdkeffiffkkekggfafkejffdcigkabfehiaiikcdcahekkcjjakiifaggfdhheahcdabfcgkdadkjebfdjkcicgbkecchkjeceecgbckhhbffeafcjdggdedkkggfjcdihefaiigjheidcggkggbckfjakeiikaakiijjcgiddhcibaiikkckdjdfbbijiikgkkjkdgebihjifdfkgchcicghaidakceehijaiidaeifbchcfaiffjfhfjbjjjghjbjjhbddhjabkihhkhgjiibckgebhfjgfdafgkihidjefegicjbackhaedhddeggaejfieaehkaejcgfcdideaafhfhaaikbfbhkaicbfaafhbbiaddcdddcfagadikiechkhajhfbafedfdiaakedcbggcfbkfcccffcacdedebedckaigkeadkejejdebkkjbccdiedcffhaibgadddfddbcbdicibhabjbekchgikjjdfebcgfkhefcgedcicdcjjceafajafbaieiaejcbidcjihfkheiiaagichehebeajjhgikjfbdeihkckibehecggcijeacfhgehdhakifkbgkabbakdkffihekieibdebkjeiiehjdfgdgfjkdkigdjkcbbggeahbefijifbikefebdfdacidkkhaegjabhecabkhjechikadjhihfbhceegkekedbheidffbghhbchbkkegjkceeekjkihkffcgfcfhfihjcgbbgceihegeifjhcaaaekkhceeicjbfaciggfjfaigkhgghebffecjhakbhhfkcdgjhhbchbjbijbkjdkghehbajjjhbfbfcbkejadbgjbhkhckijiadigbkjeddhgfdfhaacejeabaiifbeagikdbfdjcidckebegcjhjebbfjiehgjffhfhkadjaegcdfdfhikaicgkefkbfefffbfkidkdabgkafhgkkdjkdifdhjhhjgfiikkfgkhcideadiaeekfkdigdjfdbgfkagjgcgcbccejkfkagfibkeeeciddkghcckcgiifihdcifajafaaggeefaadichafikieaegabfbihicjhefeadiecfjkchdffiebhebaijcfekiabbfjjhjhckceehckakahjjgcdajceekkckcekgcecjjjiiefeebfdbdfgkdhfgjccaaejadhcdfefccccajacdaeckdfbkikfgbijjajeiicjaeabfcijbgadibcjjbiieagfkgchcedkjejckcbcehbdaadkgdihgfachhjikijejjfafbkbjckdkfigifjcefbjdfffjggjjhdfhefhcfkbiaabcgdhdajiahgfickhhjjiffedcigdjiefkcjgcaehgejkikjdceaihhddjkedbekhcbaijiddkaejkcfjfbihjchfihjiaajdcacdgbjcfjhacdigkajibcddhgifeghjaifgikiaaiccjjdbgddkbhbkcfiekkekkgigabjkijbgcfakcjfkagjgehbfffhkbecedbdbkaahacbdceddkfjiifbcfgijedabgidifbbckhdhddbkbagddeecibedifcefbeddgeabhbbckkejeegjagfeicdgcchehhgadhjejciagddjhcfgadhggkfaddfjcahfhfgbfgageaajdifekgikbhfibikeffijbhbkcjkbkehchhdcfiahekfafebhdfbfjaihhbkajekhdhkiiachfejhaefdejfegefagehcfedabaiifekjbchkiagjhegcfhbbkjbjkkbhajiedikdhgdadeekhfedjgkfecehihdgfhhjfibdcgbgckkhjjgegfaebhkhbcfbbjcchifjehfbgecgjkgbikkfchaaddidhkkghkfdkiikajakfgbchhcfidhbgdehfbgcigdjdcjkekhhbdfbafbbhacfkdjkhcfcfagckbdbkaffbbfjfihkffigaiefcigijkdfjchbcjgbjjgeaajcjeedkfadbhiikcajfcecgicjikfkaihbcbaiebjedficfbbkiibbkkgehddekjgakbjhfaacgcfcieedjikeehkjjgbkkhefgidhkeihgkfeckhdcheicbhjffcikakikdbefjkefbcfkgjkghabgebedbdcddgfcfhcakadaajkafjahajaciibghgkckbachfkcdgejheghdhfagghiigbdgghicdjbeaajicffjdhhhkdfkdhhagfdgiffehfghkfgegbffecideagkeahahkdhhbjkdffdgfdadajefjbkiiidjbhibchkfhkebkecekhchiacdafeejckjagghhegjeekfcaeiikccficidiekighfiiiaiifhfakghfkkkgjijcakkeebffiekfhiifkbegaiifhdabfjefbgjkkjigadhjhhachcjihcdjdfdfgbchabckkkefejjabcichkcbggjakhkkikichgecdbgkkfibjiaaedafhhfgeacchhhaiabkdbgbfdfabfhjiedgkjfffidagjdgjcefigcdahagkajeaagbabihcafjcdkegcfgeiihcchdjbiedgfehegdfahckgjkcigbjgdddgbaefkaakihiahkbeebdeikghhigidgjghjgbcbeahecgceaicfiefjeidgagghaghcgabiecikhbfbacfcbhakjfidijgjaikebfafecbehhiijgciadhckgbajaabccfkeijfeeihbjajbkbiejkbcjdggbigfkbkdafjckdgdgkidgfffficjbfakcaiekbbkfkibdcajecaeajfiabjckegjajkfbkkahgffgfddajgefadkhjeacgkifhhfadicfifcejfiddgkiibijbicghgfajkhciccjkiahbjcebccfbekkgeekghckbhjafjedifcdafjhgajiiajhjbjkbbjabkgfebikchkhkggbhhbghiejbdfccaadcbjfeheddeedghbdcfhdgdefjkbdiagkfgicahchjhjgahkggbaadefkhchdebdckeccciekajjfacfebiifkedkikkagdgcgheeedgaeghjjejgajkgjfcjghkaaca");
            Assert.AreEqual(35270, answer);
        }

        public int NumSplits(string s)
        {
            if (s.Length == 0)
                return 0;
            int count = 0;

            // char index : count
            Dictionary<int, int> left = new Dictionary<int, int>();
            Dictionary<int, int> right = new Dictionary<int, int>();

            // Put whole string on the "right" hashmap
            for (int i = 0; i < s.Length; i++)
            {
                var index = s[i] - 'a';
                if (!right.ContainsKey(index))
                    right.Add(index, 1);
                else
                {
                    right[index]++;
                }
            }

            for (int i = 0; i < s.Length - 1; i++)
            {
                var index = s[i] - 'a';
                // Add a character to the left hashmap
                if (!left.ContainsKey(index))
                {
                    left.Add(index, 1);
                }

                right[index]--;
                if (right[index] == 0)
                    right.Remove(index); // Remove zero counts to get a proper count of distincts

                if (left.Count == right.Count)
                {
                    count++;
                }
            }
            return count;
        }

        public int NumSplits2(string s)
        {
            int[] dp = new int[s.Length];
            HashSet<char> hash = new HashSet<char>();
            int result = 0;

            //forward
            for (int i = 0; i < s.Length; i++)
            {
                if (!hash.Contains(s[i]))
                {
                    hash.Add(s[i]);
                }
                dp[i] = hash.Count;
            }

            hash.Clear();
            //backwards
            for (int i = s.Length - 1; i > 0; i--)
            {
                if (!hash.Contains(s[i]))
                {
                    hash.Add(s[i]);
                }
                if (dp[i - 1] == hash.Count)
                {
                    result++;
                }
            }

            return result;
        }
    }
}